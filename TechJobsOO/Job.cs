using System;
namespace TechJobsOO
{
    public class Job
    {
        public int Id { get; }
        // set as public so when creating a new job they have access to the Id
        //Job Id should not have a setter because it is unique is should only be
        // retrieved, like a social security number
        private static int nextId = 1;
        // nextId will be changed when instantiating new versions of this class
        // so this must be set to static.
        //it is set to private because only this class is incrementing this value.

        public string Name { get; set; }
        public Employer EmployerName { get; set; }
        public Location EmployerLocation { get; set; }
        public PositionType JobType { get; set; }
        public CoreCompetency JobCoreCompetency { get; set; }
        //classes set to type of their respective classes, and named, then assigned getters
        //and setters, because all values need to be able to be both read and changed
        // names capitalized because these are properties and the field is implicit.

        // TODO: Add the two necessary constructors.
        public Job()
        {
            Id = nextId++;
            //shortcur version of "Id = nextId , nextId++"
        }

        public Job(string name ,
                    Employer employerName,
                    Location employerLocation,
                    PositionType jobType,
                    CoreCompetency jobCoreCompetency) : this()
            // constructor matching getters and setters above. just lowercase
            //extends the parameterless constructor above for Id=nextId++
        {
            Name = name;
            EmployerName = employerName;
            EmployerLocation = employerLocation;
            JobType = jobType;
            JobCoreCompetency = jobCoreCompetency;
            //setting properties to passed in values
        }

        public override bool Equals(object obj)
        {
            return obj is Job job &&
                   Id == job.Id;
            //autogenerated by right clicking class and selecting override Equals
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
            //autogenerated
        }


        // TODO: Generate Equals() and GetHashCode() methods.


        public override string ToString()
        { //overridden ToString shell created by right clicking class name,
            // modified with conditional that if any typed class mentioned is null,
            //then a string will be returned.
            if (Name is null &&
                EmployerName is null &&
                EmployerLocation is null &&
                JobType is null &&
                JobCoreCompetency is null)
            {
                return "Oops! This job does not seem to exist!";
            }
            // regardless of the conditional above, a string literal is generated
            // that creates a template of labels, then a variable call of the properties
            //that were assigned earlier when instantiating the job class and were passed into
            //the constructor

            return $"\n" +
                $"Id: {Id}\n" +
                $"Name: {Name}\n" +
                $"Employer: {EmployerName}\n" +
                $"Location: {EmployerLocation}\n" +
                $"Position Type: {JobType}\n" +
                $"Core Competency: {JobCoreCompetency}\n";
        }

    }
}
